/* 
 * SMS Fusion API
 *
 * This is the SMS Fusion API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@smsfusion.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HLRCallback
    /// </summary>
    [DataContract]
    public partial class HLRCallback :  IEquatable<HLRCallback>, IValidatableObject
    {
        /// <summary>
        /// Short status code of the response
        /// </summary>
        /// <value>Short status code of the response</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Valid for "valid"
            /// </summary>
            [EnumMember(Value = "valid")]
            Valid,
            
            /// <summary>
            /// Enum Invalid for "invalid"
            /// </summary>
            [EnumMember(Value = "invalid")]
            Invalid,
            
            /// <summary>
            /// Enum Unknown for "unknown"
            /// </summary>
            [EnumMember(Value = "unknown")]
            Unknown
        }

        /// <summary>
        /// If the response code is temporary or permenant
        /// </summary>
        /// <value>If the response code is temporary or permenant</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DurationEnum
        {
            
            /// <summary>
            /// Enum Perm for "perm"
            /// </summary>
            [EnumMember(Value = "perm")]
            Perm,
            
            /// <summary>
            /// Enum Temp for "temp"
            /// </summary>
            [EnumMember(Value = "temp")]
            Temp
        }

        /// <summary>
        /// Short status code of the response
        /// </summary>
        /// <value>Short status code of the response</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// If the response code is temporary or permenant
        /// </summary>
        /// <value>If the response code is temporary or permenant</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public DurationEnum? Duration { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="HLRCallback" /> class.
        /// </summary>
        /// <param name="Id">Unique ID for response.</param>
        /// <param name="Msisdn">The MSISDN of the number queried.</param>
        /// <param name="Status">Short status code of the response.</param>
        /// <param name="Country">ISO 3166-2 country code.</param>
        /// <param name="_Operator">The operator attached to the MSISDN.</param>
        /// <param name="Mccmnc">MCC and MNC of MSDISDN.</param>
        /// <param name="Duration">If the response code is temporary or permenant.</param>
        /// <param name="Message">Full status code of the response.</param>
        /// <param name="Extended">Extended explanation of the status code.</param>
        /// <param name="Cost">Cost of the response.</param>
        public HLRCallback(string Id = default(string), long? Msisdn = default(long?), StatusEnum? Status = default(StatusEnum?), string Country = default(string), string _Operator = default(string), int? Mccmnc = default(int?), DurationEnum? Duration = default(DurationEnum?), string Message = default(string), string Extended = default(string), float? Cost = default(float?))
        {
            this.Id = Id;
            this.Msisdn = Msisdn;
            this.Status = Status;
            this.Country = Country;
            this._Operator = _Operator;
            this.Mccmnc = Mccmnc;
            this.Duration = Duration;
            this.Message = Message;
            this.Extended = Extended;
            this.Cost = Cost;
        }
        
        /// <summary>
        /// Unique ID for response
        /// </summary>
        /// <value>Unique ID for response</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// The MSISDN of the number queried
        /// </summary>
        /// <value>The MSISDN of the number queried</value>
        [DataMember(Name="msisdn", EmitDefaultValue=false)]
        public long? Msisdn { get; set; }
        /// <summary>
        /// ISO 3166-2 country code
        /// </summary>
        /// <value>ISO 3166-2 country code</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }
        /// <summary>
        /// The operator attached to the MSISDN
        /// </summary>
        /// <value>The operator attached to the MSISDN</value>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string _Operator { get; set; }
        /// <summary>
        /// MCC and MNC of MSDISDN
        /// </summary>
        /// <value>MCC and MNC of MSDISDN</value>
        [DataMember(Name="mccmnc", EmitDefaultValue=false)]
        public int? Mccmnc { get; set; }
        /// <summary>
        /// Full status code of the response
        /// </summary>
        /// <value>Full status code of the response</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Extended explanation of the status code
        /// </summary>
        /// <value>Extended explanation of the status code</value>
        [DataMember(Name="extended", EmitDefaultValue=false)]
        public string Extended { get; set; }
        /// <summary>
        /// Cost of the response
        /// </summary>
        /// <value>Cost of the response</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public float? Cost { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HLRCallback {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Msisdn: ").Append(Msisdn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  _Operator: ").Append(_Operator).Append("\n");
            sb.Append("  Mccmnc: ").Append(Mccmnc).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Extended: ").Append(Extended).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HLRCallback);
        }

        /// <summary>
        /// Returns true if HLRCallback instances are equal
        /// </summary>
        /// <param name="other">Instance of HLRCallback to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HLRCallback other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Msisdn == other.Msisdn ||
                    this.Msisdn != null &&
                    this.Msisdn.Equals(other.Msisdn)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Country == other.Country ||
                    this.Country != null &&
                    this.Country.Equals(other.Country)
                ) && 
                (
                    this._Operator == other._Operator ||
                    this._Operator != null &&
                    this._Operator.Equals(other._Operator)
                ) && 
                (
                    this.Mccmnc == other.Mccmnc ||
                    this.Mccmnc != null &&
                    this.Mccmnc.Equals(other.Mccmnc)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Extended == other.Extended ||
                    this.Extended != null &&
                    this.Extended.Equals(other.Extended)
                ) && 
                (
                    this.Cost == other.Cost ||
                    this.Cost != null &&
                    this.Cost.Equals(other.Cost)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Msisdn != null)
                    hash = hash * 59 + this.Msisdn.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Country != null)
                    hash = hash * 59 + this.Country.GetHashCode();
                if (this._Operator != null)
                    hash = hash * 59 + this._Operator.GetHashCode();
                if (this.Mccmnc != null)
                    hash = hash * 59 + this.Mccmnc.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Extended != null)
                    hash = hash * 59 + this.Extended.GetHashCode();
                if (this.Cost != null)
                    hash = hash * 59 + this.Cost.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
