/* 
 * SMS Fusion API
 *
 * This is the SMS Fusion API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@smsfusion.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send an SMS
        /// </summary>
        /// <remarks>
        /// Send one or more SMS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>SMSResult</returns>
        SMSResult SendSMS (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null);

        /// <summary>
        /// Send an SMS
        /// </summary>
        /// <remarks>
        /// Send one or more SMS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>ApiResponse of SMSResult</returns>
        ApiResponse<SMSResult> SendSMSWithHttpInfo (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send an SMS
        /// </summary>
        /// <remarks>
        /// Send one or more SMS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>Task of SMSResult</returns>
        System.Threading.Tasks.Task<SMSResult> SendSMSAsync (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null);

        /// <summary>
        /// Send an SMS
        /// </summary>
        /// <remarks>
        /// Send one or more SMS
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>Task of ApiResponse (SMSResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<SMSResult>> SendSMSAsyncWithHttpInfo (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSApi : ISMSApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send an SMS Send one or more SMS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>SMSResult</returns>
        public SMSResult SendSMS (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null)
        {
             ApiResponse<SMSResult> localVarResponse = SendSMSWithHttpInfo(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send an SMS Send one or more SMS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>ApiResponse of SMSResult</returns>
        public ApiResponse< SMSResult > SendSMSWithHttpInfo (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SMSApi->SendSMS");
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling SMSApi->SendSMS");
            // verify the required parameter 'msg' is set
            if (msg == null)
                throw new ApiException(400, "Missing required parameter 'msg' when calling SMSApi->SendSMS");

            var localVarPath = "/sms/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (num != null) localVarQueryParams.Add("num", Configuration.ApiClient.ParameterToString(num)); // query parameter
            if (msg != null) localVarQueryParams.Add("msg", Configuration.ApiClient.ParameterToString(msg)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (deliverby != null) localVarQueryParams.Add("deliverby", Configuration.ApiClient.ParameterToString(deliverby)); // query parameter
            if (dlrcb != null) localVarQueryParams.Add("dlrcb", Configuration.ApiClient.ParameterToString(dlrcb)); // query parameter
            if (replycb != null) localVarQueryParams.Add("replycb", Configuration.ApiClient.ParameterToString(replycb)); // query parameter
            if (replyemail != null) localVarQueryParams.Add("replyemail", Configuration.ApiClient.ParameterToString(replyemail)); // query parameter
            if (validity != null) localVarQueryParams.Add("validity", Configuration.ApiClient.ParameterToString(validity)); // query parameter
            if (cc != null) localVarQueryParams.Add("cc", Configuration.ApiClient.ParameterToString(cc)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SMSResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SMSResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SMSResult)));
            
        }

        /// <summary>
        /// Send an SMS Send one or more SMS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>Task of SMSResult</returns>
        public async System.Threading.Tasks.Task<SMSResult> SendSMSAsync (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null)
        {
             ApiResponse<SMSResult> localVarResponse = await SendSMSAsyncWithHttpInfo(key, num, msg, from, deliverby, dlrcb, replycb, replyemail, validity, cc);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send an SMS Send one or more SMS
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;</param>
        /// <param name="num">Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s</param>
        /// <param name="msg">Message content to send</param>
        /// <param name="from">MSISDN or vanity alphanumeric source number (optional)</param>
        /// <param name="deliverby">UTC encoded time to send the SMS (optional)</param>
        /// <param name="dlrcb">HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replycb">HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds (optional)</param>
        /// <param name="replyemail">Email address to send replies to (optional)</param>
        /// <param name="validity">Time in minutes to keep the SMS valid for (optional)</param>
        /// <param name="cc">2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally (optional)</param>
        /// <returns>Task of ApiResponse (SMSResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SMSResult>> SendSMSAsyncWithHttpInfo (string key, List<string> num, string msg, string from = null, string deliverby = null, string dlrcb = null, string replycb = null, string replyemail = null, int? validity = null, string cc = null)
        {
            // verify the required parameter 'key' is set
            if (key == null)
                throw new ApiException(400, "Missing required parameter 'key' when calling SMSApi->SendSMS");
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling SMSApi->SendSMS");
            // verify the required parameter 'msg' is set
            if (msg == null)
                throw new ApiException(400, "Missing required parameter 'msg' when calling SMSApi->SendSMS");

            var localVarPath = "/sms/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (key != null) localVarQueryParams.Add("key", Configuration.ApiClient.ParameterToString(key)); // query parameter
            if (num != null) localVarQueryParams.Add("num", Configuration.ApiClient.ParameterToString(num)); // query parameter
            if (msg != null) localVarQueryParams.Add("msg", Configuration.ApiClient.ParameterToString(msg)); // query parameter
            if (from != null) localVarQueryParams.Add("from", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (deliverby != null) localVarQueryParams.Add("deliverby", Configuration.ApiClient.ParameterToString(deliverby)); // query parameter
            if (dlrcb != null) localVarQueryParams.Add("dlrcb", Configuration.ApiClient.ParameterToString(dlrcb)); // query parameter
            if (replycb != null) localVarQueryParams.Add("replycb", Configuration.ApiClient.ParameterToString(replycb)); // query parameter
            if (replyemail != null) localVarQueryParams.Add("replyemail", Configuration.ApiClient.ParameterToString(replyemail)); // query parameter
            if (validity != null) localVarQueryParams.Add("validity", Configuration.ApiClient.ParameterToString(validity)); // query parameter
            if (cc != null) localVarQueryParams.Add("cc", Configuration.ApiClient.ParameterToString(cc)); // query parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams["key"] = Configuration.GetApiKeyWithPrefix("key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendSMS", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SMSResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SMSResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SMSResult)));
            
        }

    }
}
